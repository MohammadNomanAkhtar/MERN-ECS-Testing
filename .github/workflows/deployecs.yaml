name: Multi-Container ECS Fargate Deploy on Push

on:
  push:
    branches:
      - main # Workflow will trigger on pushes to the 'main' branch.

env:
  # === AWS Configuration (Update these values with your actual AWS details) ===
  AWS_REGION: us-east-1              # Your AWS region (e.g., ap-south-1).
  ECS_CLUSTER_NAME: my-mern-cluster  # The name of your ECS Cluster.
  ECS_SERVICE_NAME: my-mern-service  # The name of your ECS Service.

  # --- Frontend Configuration ---
  FRONTEND_ECR_REPOSITORY_NAME: my-mern-app-frontend   # ECR repository for frontend.
  FRONTEND_CONTAINER_NAME: my-mern-frontend-container  # Name of frontend container in Task Definition.
  FRONTEND_DOCKERFILE_PATH: ./MERN/frontend            # <--- PATH UPDATED HERE
                                                       # Path to frontend Dockerfile directory.

  # --- Backend Configuration ---
  BACKEND_ECR_REPOSITORY_NAME: my-mern-app-backend     # ECR repository for backend.
  BACKEND_CONTAINER_NAME: my-mern-backend-container    # Name of backend container in Task Definition.
  BACKEND_DOCKERFILE_PATH: ./MERN/backend              # <--- PATH UPDATED HERE
                                                       # Path to backend Dockerfile directory.
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # === Build and Push Frontend Image ===
      - name: Build and Push Frontend Docker Image to ECR
        id: build-push-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Frontend Docker image from context: ${{ env.FRONTEND_DOCKERFILE_PATH }}"
          docker build -t $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY_NAME:$IMAGE_TAG ${{ env.FRONTEND_DOCKERFILE_PATH }}
          
          echo "Pushing Frontend Docker image to ECR..."
          docker push $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY_NAME:$IMAGE_TAG
          
          echo "FRONTEND_IMAGE_URI=$ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_ENV

      # === Build and Push Backend Image ===
      - name: Build and Push Backend Docker Image to ECR
        id: build-push-backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Backend Docker image from context: ${{ env.BACKEND_DOCKERFILE_PATH }}"
          docker build -t $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY_NAME:$IMAGE_TAG ${{ env.BACKEND_DOCKERFILE_PATH }}
          
          echo "Pushing Backend Docker image to ECR..."
          docker push $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY_NAME:$IMAGE_TAG
          
          echo "BACKEND_IMAGE_URI=$ECR_REGISTRY/$BACKEND_ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Generate and Register New ECS Task Definition
        id: register-task-definition
        run: |
          echo "Attempting to fetch existing active task definition for service: ${{ env.ECS_SERVICE_NAME }}"
          
          CURRENT_TASK_DEF_ARN=$(aws ecs describe-services \
                                --cluster "${{ env.ECS_CLUSTER_NAME }}" \
                                --services "${{ env.ECS_SERVICE_NAME }}" \
                                --query 'services[0].taskDefinition' \
                                --output text)
          
          if [ -z "$CURRENT_TASK_DEF_ARN" ] || [ "$CURRENT_TASK_DEF_ARN" == "None" ]; then
            echo "Error: Could not find current task definition for service '${{ env.ECS_SERVICE_NAME }}'."
            echo "Please ensure the service is running and has an associated task definition in AWS Console."
            exit 1
          fi

          echo "Found current task definition ARN: $CURRENT_TASK_DEF_ARN"
          
          TASK_DEF_JSON=$(aws ecs describe-task-definition \
                          --task-definition "$CURRENT_TASK_DEF_ARN" \
                          --query 'taskDefinition' \
                          --output json)
          
          if [ -z "$TASK_DEF_JSON" ] || ! echo "$TASK_DEF_JSON" | jq -e '.containerDefinitions | type == "array"' > /dev/null; then
            echo "Error: Could not retrieve valid task definition or container definitions from current ARN."
            exit 1
          fi

          echo "Original Task Definition JSON fetched successfully."

          # Dynamically update both frontend and backend container images
          UPDATED_TASK_DEF=$(echo "$TASK_DEF_JSON" | jq \
            --arg FRONTEND_CONTAINER_NAME "${{ env.FRONTEND_CONTAINER_NAME }}" \
            --arg FRONTEND_IMAGE_URI "${{ env.FRONTEND_IMAGE_URI }}" \
            --arg BACKEND_CONTAINER_NAME "${{ env.BACKEND_CONTAINER_NAME }}" \
            --arg BACKEND_IMAGE_URI "${{ env.BACKEND_IMAGE_URI }}" \
            '
            .containerDefinitions |= map(
              if .name == $FRONTEND_CONTAINER_NAME then
                .image = $FRONTEND_IMAGE_URI
              elif .name == $BACKEND_CONTAINER_NAME then
                .image = $BACKEND_IMAGE_URI
              else
                .
              end
            )
            | del(.taskDefinitionArn)
            | del(.revision)
            | del(.status)
            | del(.compatibilities)
            | del(.requiresAttributes)'
          )

          echo "Updated Task Definition JSON with new image URIs for both containers."
          
          REGISTERED_TASK_DEF=$(aws ecs register-task-definition --cli-input-json "$UPDATED_TASK_DEF")
          NEW_TASK_DEF_ARN=$(echo "$REGISTERED_TASK_DEF" | jq -r '.taskDefinition.taskDefinitionArn')

          echo "Registered new task definition ARN: $NEW_TASK_DEF_ARN"
          echo "TASK_DEFINITION_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION_ARN }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
          
      - name: Cleanup old Docker images (optional, for GitHub Actions runner)
        if: always()
        run: docker system prune -af
