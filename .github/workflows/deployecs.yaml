name: Full ECS Fargate Deploy on Push

on:
  push:
    branches:
      - main # Workflow will trigger on push to the main branch

env:
  # === AWS Configuration (Update these values with your actual AWS details) ===
  AWS_REGION: us-east-1              # Your AWS region (e.g., ap-south-1 for Mumbai)
  ECR_REPOSITORY_NAME: my-mern-app   # The name of your ECR repository (e.g., my-mern-app)
  ECS_CLUSTER_NAME: my-mern-cluster  # The name of your ECS Cluster (e.g., my-mern-cluster)
  ECS_SERVICE_NAME: my-mern-service  # The name of your ECS Service (e.g., my-mern-service)
  CONTAINER_NAME: my-mern-container  # The exact name of your container within the ECS Task Definition (CRUCIAL!)

  # If your Dockerfile is not in the project root, provide its path here.
  # Dockerfile_PATH: ./path/to/your/Dockerfile
  # If it's in the root, leave this commented out. The build command will use '.' automatically.

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }} # GitHub Secret
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }} # GitHub Secret
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image to ECR
        id: build-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }} # Use the commit SHA as the image tag for versioning
        run: |
          # Use the Dockerfile_PATH variable if your Dockerfile is not in the project root.
          # Otherwise, the default context is '.' (current directory).
          DOCKER_BUILD_CONTEXT=${{ env.Dockerfile_PATH || '.' }}
          
          echo "Building Docker image from context: $DOCKER_BUILD_CONTEXT"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG $DOCKER_BUILD_CONTEXT
          
          echo "Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          
          # Store the full image URI in an environment variable for subsequent steps
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Generate and Register New ECS Task Definition
        id: register-task-definition
        run: |
          echo "Attempting to fetch existing active task definition for service: ${{ env.ECS_SERVICE_NAME }}"
          
          # Retrieve the ARN of the current active task definition associated with the ECS Service.
          CURRENT_TASK_DEF_ARN=$(aws ecs describe-services \
                                --cluster "${{ env.ECS_CLUSTER_NAME }}" \
                                --services "${{ env.ECS_SERVICE_NAME }}" \
                                --query 'services[0].taskDefinition' \
                                --output text)
          
          if [ -z "$CURRENT_TASK_DEF_ARN" ] || [ "$CURRENT_TASK_DEF_ARN" == "None" ]; then
            echo "Error: Could not find current task definition for service '${{ env.ECS_SERVICE_NAME }}'."
            echo "Please ensure the service is running and has an associated task definition in AWS Console."
            exit 1
          fi

          echo "Found current task definition ARN: $CURRENT_TASK_DEF_ARN"
          
          # Fetch the full JSON of the current active task definition.
          TASK_DEF_JSON=$(aws ecs describe-task-definition \
                          --task-definition "$CURRENT_TASK_DEF_ARN" \
                          --query 'taskDefinition' \
                          --output json)
          
          # Validate that the fetched JSON is valid and contains container definitions.
          if [ -z "$TASK_DEF_JSON" ] || ! echo "$TASK_DEF_JSON" | jq -e '.containerDefinitions | type == "array"' > /dev/null; then
            echo "Error: Could not retrieve valid task definition or container definitions from current ARN."
            exit 1
          fi

          echo "Original Task Definition JSON fetched successfully."

          # Update the container definition with the new image URI using 'jq'.
          # The 'CONTAINER_NAME' environment variable must exactly match the name in your Task Definition.
          # Remove transient fields like taskDefinitionArn, revision, status, etc., as they are automatically generated.
          UPDATED_TASK_DEF=$(echo "$TASK_DEF_JSON" | jq \
            --arg CONTAINER_NAME "${{ env.CONTAINER_NAME }}" \
            --arg IMAGE_URI "${{ env.IMAGE_URI }}" \
            '
            .containerDefinitions |= map(
              if .name == $CONTAINER_NAME then
                .image = $IMAGE_URI
              else
                .
              end
            )
            | del(.taskDefinitionArn)
            | del(.revision)
            | del(.status)
            | del(.compatibilities)
            | del(.requiresAttributes)'
          )

          echo "Updated Task Definition JSON with new image URI."
          
          # Register the new task definition revision with AWS ECS.
          REGISTERED_TASK_DEF=$(aws ecs register-task-definition --cli-input-json "$UPDATED_TASK_DEF")
          NEW_TASK_DEF_ARN=$(echo "$REGISTERED_TASK_DEF" | jq -r '.taskDefinition.taskDefinitionArn')

          echo "Registered new task definition ARN: $NEW_TASK_DEF_ARN"
          # Make the new Task Definition ARN available to subsequent steps.
          echo "TASK_DEFINITION_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION_ARN }} # Use the ARN of the newly registered task definition
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true # Wait for the deployment to complete and become stable
          
      - name: Cleanup old Docker images (optional, for GitHub Actions runner)
        if: always() # Run this step regardless of previous step failures
        run: docker system prune -af
