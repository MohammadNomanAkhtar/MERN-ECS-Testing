name: Multi-Container ECS Fargate Deploy (Create/Update Infra)

on:
  push:
    branches:
      - main # Workflow will trigger on pushes to the 'main' branch.

env:
  # === AWS Configuration (Update these values with your actual AWS details) ===
  AWS_REGION: us-east-1           # Your AWS region (e.g., ap-south-1).
  
  # === ECS Cluster Configuration ===
  ECS_CLUSTER_NAME: my-mern-cluster # The name of your ECS Cluster.

  # === ECS Service Configuration ===
  ECS_SERVICE_NAME: my-mern-service # The name of your ECS Service.
  VPC_ID: vpc-0aac057eb5e51b176    # YOUR VPC ID
  SUBNET_IDS: subnet-007bea8f5c9577c4d,subnet-0d7e4d955f8d33774 # YOUR SUBNET IDs (comma-separated)
  SECURITY_GROUP_IDS: sg-00e2ebce3a7b1531f # YOUR SECURITY GROUP ID

  # === Task Definition Configuration ===
  ECS_TASK_EXECUTION_ROLE_ARN: arn:aws:iam::678878256416:role/ecsTaskExecutionRole # Your provided Execution Role ARN
  TASK_CPU: 2048 # 2vCPU
  TASK_MEMORY: 4096 # 4GB

  # --- Frontend Configuration ---
  FRONTEND_ECR_REPOSITORY_NAME: my-mern-app-frontend
  FRONTEND_CONTAINER_NAME: my-mern-frontend-container
  FRONTEND_DOCKERFILE_PATH: ./mern/frontend
  FRONTEND_CONTAINER_PORT: 5173 # Make sure your Dockerfile EXPOSEs this port
  FRONTEND_HEALTH_CHECK_PATH: / # Path for container health check (adjust if needed)

  # --- Backend Configuration ---
  BACKEND_ECR_REPOSITORY_NAME: my-mern-app-backend
  BACKEND_CONTAINER_NAME: my-mern-backend-container
  BACKEND_DOCKERFILE_PATH: ./mern/backend
  BACKEND_CONTAINER_PORT: 5050
  BACKEND_HEALTH_CHECK_PATH: /health # Path for container health check (adjust if needed)
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }} # Corrected secret name
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }} # Corrected secret name
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # === Create Frontend ECR Repository if it doesn't exist ===
      - name: Create Frontend ECR Repository
        run: |
          echo "Checking for ECR repository: ${{ env.FRONTEND_ECR_REPOSITORY_NAME }}"
          aws ecr describe-repositories --repository-names ${{ env.FRONTEND_ECR_REPOSITORY_NAME }} --region ${{ env.AWS_REGION }} > /dev/null 2>&1 || \
          (echo "Repository not found, creating..." && aws ecr create-repository --repository-name ${{ env.FRONTEND_ECR_REPOSITORY_NAME }} --region ${{ env.AWS_REGION }})
          echo "Frontend ECR repository ready."

      # === Create Backend ECR Repository if it doesn't exist ===
      - name: Create Backend ECR Repository
        run: |
          echo "Checking for ECR repository: ${{ env.BACKEND_ECR_REPOSITORY_NAME }}"
          aws ecr describe-repositories --repository-names ${{ env.BACKEND_ECR_REPOSITORY_NAME }} --region ${{ env.AWS_REGION }} > /dev/null 2>&1 || \
          (echo "Repository not found, creating..." && aws ecr create-repository --repository-name ${{ env.BACKEND_ECR_REPOSITORY_NAME }} --region ${{ env.AWS_REGION }})
          echo "Backend ECR repository ready."

      # === Build and Push Frontend Image ===
      - name: Build and Push Frontend Docker Image to ECR
        id: build-push-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Frontend Docker image from context: ${{ env.FRONTEND_DOCKERFILE_PATH }}"
          docker build -t "$ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY_NAME:$IMAGE_TAG" "${{ env.FRONTEND_DOCKERFILE_PATH }}"
          
          echo "Pushing Frontend Docker image to ECR..."
          docker push "$ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY_NAME:$IMAGE_TAG"
          
          echo "FRONTEND_IMAGE_URI=$ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_ENV

      # === Build and Push Backend Image ===
      - name: Build and Push Backend Docker Image to ECR
        id: build-push-backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Backend Docker image from context: ${{ env.BACKEND_DOCKERFILE_PATH }}"
          docker build -t "$ECR_REGISTRY/$BACKEND_ECR_REPOSITORY_NAME:$IMAGE_TAG" "${{ env.BACKEND_DOCKERFILE_PATH }}"
          
          echo "Pushing Backend Docker image to ECR..."
          docker push "$ECR_REGISTRY/$BACKEND_ECR_REPOSITORY_NAME:$IMAGE_TAG"
          
          echo "BACKEND_IMAGE_URI=$ECR_REGISTRY/$BACKEND_ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_ENV

      # === Check/Create ECS Cluster ===
      - name: Check or Create ECS Cluster
        id: create-cluster
        run: |
          echo "Checking for ECS Cluster: ${{ env.ECS_CLUSTER_NAME }}"
          CLUSTER_STATUS=$(aws ecs describe-clusters --cluster ${{ env.ECS_CLUSTER_NAME }} --query 'clusters[0].status' --output text --region ${{ env.AWS_REGION }} 2>/dev/null)
          
          if [ "$CLUSTER_STATUS" == "ACTIVE" ]; then
            echo "ECS Cluster '${{ env.ECS_CLUSTER_NAME }}' already exists and is active."
          else
            echo "ECS Cluster '${{ env.ECS_CLUSTER_NAME }}' not found or not active, creating..."
            aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
            echo "ECS Cluster created."
          fi
          echo "ECS Cluster ready."
          
      # === Generate and Register New ECS Task Definition ===
      - name: Generate and Register New ECS Task Definition
        id: register-task-definition
        run: |
          FRONTEND_IMAGE_URI="${{ env.FRONTEND_IMAGE_URI }}"
          BACKEND_IMAGE_URI="${{ env.BACKEND_IMAGE_URI }}"

          TASK_DEFINITION_JSON=$(jq -n \
            --arg frontend_name "${{ env.FRONTEND_CONTAINER_NAME }}" \
            --arg frontend_image "$FRONTEND_IMAGE_URI" \
            --arg frontend_port "${{ env.FRONTEND_CONTAINER_PORT }}" \
            --arg frontend_health_path "${{ env.FRONTEND_HEALTH_CHECK_PATH }}" \
            --arg backend_name "${{ env.BACKEND_CONTAINER_NAME }}" \
            --arg backend_image "$BACKEND_IMAGE_URI" \
            --arg backend_port "${{ env.BACKEND_CONTAINER_PORT }}" \
            --arg backend_health_path "${{ env.BACKEND_HEALTH_CHECK_PATH }}" \
            --arg task_cpu "${{ env.TASK_CPU }}" \
            --arg task_memory "${{ env.TASK_MEMORY }}" \
            --arg execution_role "${{ env.ECS_TASK_EXECUTION_ROLE_ARN }}" \
            --arg mongo_uri "${{ secrets.MONGODB_URI }}" \
            '{
              "family": "${{ env.ECS_SERVICE_NAME }}-task-definition",
              "networkMode": "awsvpc",
              "requiresCompatibilities": ["FARGATE"],
              "cpu": $task_cpu,
              "memory": $task_memory,
              "executionRoleArn": $execution_role,
              "taskRoleArn": $execution_role,  # <--- NEW LINE ADDED HERE
              "containerDefinitions": [
                {
                  "name": $frontend_name,
                  "image": $frontend_image,
                  "cpu": ($task_cpu | tonumber / 2),
                  "memory": ($task_memory | tonumber / 2),
                  "essential": true,
                  "portMappings": [
                    {
                      "containerPort": ($frontend_port | tonumber),
                      "hostPort": ($frontend_port | tonumber),
                      "protocol": "tcp"
                    }
                  ],
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "/ecs/my-mern-app",
                      "awslogs-region": "${{ env.AWS_REGION }}",
                      "awslogs-stream-prefix": "frontend"
                    }
                  },
                  "healthCheck": {
                    "command": ["CMD-SHELL", "curl -f http://localhost:\($frontend_port)$frontend_health_path || exit 1"],
                    "interval": 60,
                    "timeout": 30,
                    "retries": 5,
                    "startPeriod": 300
                  }
                },
                {
                  "name": $backend_name,
                  "image": $backend_image,
                  "cpu": ($task_cpu | tonumber / 2),
                  "memory": ($task_memory | tonumber / 2),
                  "essential": true,
                  "portMappings": [
                    {
                      "containerPort": ($backend_port | tonumber),
                      "hostPort": ($backend_port | tonumber),
                      "protocol": "tcp"
                    }
                  ],
                  "environment": [
                    {
                      "name": "MONGODB_URI",
                      "value": $mongo_uri
                    },
                    {
                      "name": "PORT",
                      "value": ($backend_port | tostring)
                    }
                  ],
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "/ecs/my-mern-app",
                      "awslogs-region": "${{ env.AWS_REGION }}",
                      "awslogs-stream-prefix": "backend"
                    }
                  },
                  "healthCheck": { # Backend health check settings adjusted
                    "command": ["CMD-SHELL", "curl -f http://localhost:\($backend_port)$backend_health_path || exit 1"],
                    "interval": 60,   # Changed from 30 to 60
                    "timeout": 30,    # Changed from 5 to 30
                    "retries": 5,     # Changed from 3 to 5
                    "startPeriod": 300
                  }
                }
              ]
            }'
          )

          echo "Generated Task Definition JSON:"
          echo "$TASK_DEFINITION_JSON" | jq .

          REGISTERED_TASK_DEF=$(aws ecs register-task-definition --cli-input-json "$TASK_DEFINITION_JSON" --region ${{ env.AWS_REGION }})
          NEW_TASK_DEF_ARN=$(echo "$REGISTERED_TASK_DEF" | jq -r '.taskDefinition.taskDefinitionArn')

          echo "Registered new task definition ARN: $NEW_TASK_DEF_ARN"
          echo "TASK_DEFINITION_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV


      # === Check/Create/Update ECS Service ===
      - name: Check or Create/Update ECS Service
        id: create-update-service
        run: |
          # Use a more robust check for service existence
          SERVICE_EXISTS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER_NAME }} --services ${{ env.ECS_SERVICE_NAME }} --query 'services[0].status' --output text --region ${{ env.AWS_REGION }} 2>/dev/null || echo "NOT_FOUND")

          if [ "$SERVICE_EXISTS" == "ACTIVE" ]; then
            echo "ECS Service '${{ env.ECS_SERVICE_NAME }}' already exists, updating..."
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER_NAME }} \
              --service ${{ env.ECS_SERVICE_NAME }} \
              --task-definition ${{ env.TASK_DEFINITION_ARN }} \
              --desired-count 1 \
              --force-new-deployment \
              --health-check-grace-period 300 \
              --enable-execute-command \
              --region ${{ env.AWS_REGION }}
            echo "ECS Service updated."
          else
            echo "ECS Service '${{ env.ECS_SERVICE_NAME }}' not found, creating..."
            aws ecs create-service \
              --cluster ${{ env.ECS_CLUSTER_NAME }} \
              --service-name ${{ env.ECS_SERVICE_NAME }} \
              --task-definition ${{ env.TASK_DEFINITION_ARN }} \
              --desired-count 1 \
              --launch-type "FARGATE" \
              --network-configuration "awsvpcConfiguration={subnets=[${{ env.SUBNET_IDS }}],securityGroups=[${{ env.SECURITY_GROUP_IDS }}],assignPublicIp=ENABLED}" \
              --platform-version "LATEST" \
              --health-check-grace-period 300 \
              --enable-execute-command \
              --region ${{ env.AWS_REGION }}
            echo "ECS Service created."
          fi
          echo "Waiting for service stability..."
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER_NAME }} --services ${{ env.ECS_SERVICE_NAME }} --region ${{ env.AWS_REGION }}
          echo "ECS Service is stable."
          
      - name: Cleanup old Docker images (optional, for GitHub Actions runner)
        if: always()
        run: docker system prune -af
