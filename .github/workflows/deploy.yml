name: EC2 Auto Deploy on Push

on:
  push:
    branches:
      - main  # Workflow will trigger on push to the main branch

env:
  DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
  DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
  DEPLOY_PORT: ${{ secrets.EC2_PORT || 22 }}
  PROJECT_PATH: /home/ubuntu/MERN-STACK-AZHAR      # Your project path on EC2
  REPOSITORY_URL: https://github.com/${{ github.repository }} # Repository URL
  REPOSITORY_BRANCH: main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository (on GitHub Actions Runner)
        uses: actions/checkout@v3
        with:
          ssh-known-hosts: ${{ env.DEPLOY_HOST }}

      - name: Configure SSH Key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} -p ${{ env.DEPLOY_PORT }} "
            # Navigate to the project directory
            cd \"${{ env.PROJECT_PATH }}\" || {
              echo \"Error: Could not navigate to project directory.\"
              exit 1
            }

            # Check if it's a git repository, if not clone
            if [ ! -d \".git\" ]; then
              echo \"Not a git repository, cloning...\"
              git clone -b ${{ env.REPOSITORY_BRANCH }} \"${{ env.REPOSITORY_URL }}\" . || {
                echo \"Error: Git clone failed.\"
                exit 1
              }
            else
              echo \"Pulling latest changes...\"
              git pull origin ${{ env.REPOSITORY_BRANCH }} || {
                echo \"Error: Git pull failed.\"
                exit 1
              }
            fi

            # Check if docker-compose.yml exists
            if [ ! -f \"docker-compose.yml\" ] && [ ! -f \"docker-compose.yaml\" ] && [ ! -f \"compose.yml\" ] && [ ! -f \"compose.yaml\" ]; then
              echo \"Error: docker-compose.yml or docker-compose.yaml or compose.yml or compose.yaml not found in project root.\"
              exit 1
            fi

            # Run Docker Compose commands with sudo
            if command -v docker-compose &> /dev/null
            then
              echo \"Running docker-compose with sudo...\"
              sudo docker-compose down || echo \"Warning: docker-compose down failed.\"
              sudo docker-compose up -d --build || {
                echo \"Error: docker-compose up failed.\"
                exit 1
              }
              sudo docker image prune -af || echo \"Warning: docker image prune failed.\"
            else
              echo \"Error: docker-compose command not found. Please ensure Docker Compose is installed on the EC2 instance.\"
              exit 1
            fi

            # Fix Docker permission (add user to docker group) - Requires sudo, might need passwordless sudo
            sudo usermod -aG docker ${{ env.DEPLOY_USER }}
            newgrp docker || true # Try to switch group, ignore failure
            echo \"Docker permissions updated (might require logout/login or new session).\"
          "